@page "/"
@using BlazorApp1.Data

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject IServiceProvider ServiceProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
@* @inject UserManager<ApplicationUser> _userManager *@
<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        <p>Hello, @context.User.Identity?.Name!</p>
    </Authorized>
    <NotAuthorized><p>You are not logged in.</p></NotAuthorized>
</AuthorizeView>

<AuthorizeView Roles="Admin">
    <Authorized>
        <p>You are an admin.</p>
    </Authorized>
</AuthorizeView>


@* @if (_isAuthenticated)
{
    <p>You are logged in.</p>
    @if (_isAdmin)
    {
        <p>You are an admin.</p>
    }
}
else
{
    <p>You are not logged in.</p>
} *@

@code {
    public bool isAuthenticated;
    public bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var authUser = authState.User;
        isAuthenticated = authUser.Identity.IsAuthenticated;
        isAdmin = authUser.IsInRole("Admin");

        //await CreateUserRolesAsync("silja.vj@gmail.com", "Admin");
    }

    // public async Task CreateUserRolesAsync(string user, string role)
    // {
    //     var roleManager = ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();

    //     var roleRoleExists = await roleManager.RoleExistsAsync(role);
    //     if (!roleRoleExists)
    //         await roleManager.CreateAsync(new IdentityRole(role));

    //     Data.ApplicationUser identityUser = await _userManager.FindByEmailAsync(user);
    //     var userRoles = await _userManager.GetRolesAsync(identityUser);

    //     if (!userRoles.Contains(role))
    //         await _userManager.AddToRoleAsync(identityUser, role);
    // }
}