@page "/"
@using BlazorApp1.Code
@using BlazorApp1.Components.Account
@using BlazorApp1.Components.Account.Shared
@using BlazorApp1.Components.Layout
@using BlazorApp1.Data
@using BlazorApp1.Data.DbContexts
@using BlazorApp1.Data.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication

@inject IServiceProvider ServiceProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> _userManager
@inject HashingHandler HashingHandler
@* @inject SymmetricEncryptionHandler SymmetricEncryptionHandler *@
@inject AsymmetricEncryptionHandler AsymmetricEncryptionHandler
@inject ToDoDbContext ToDoDbContext
@inject IdentityRedirectManager RedirectManager

<PageTitle>Home</PageTitle>

@if (!isCPRValid)
{
    <AuthorizeView>
        <Authorized Context="authContext">
            <div class="row justify-content-center">
                <div class="col-md-4">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }
                    <EditForm Model="Input" method="post" OnValidSubmit="HandleCPRSubmit" FormName="cpr">
                        <DataAnnotationsValidator />
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.CPRNumber" class="form-control" aria-required="true" placeholder="0000000000" />
                            <label for="cpr" class="form-label">CPR</label>
                            <ValidationMessage For="() => Input.CPRNumber" class="text-danger" />
                        </div>
                        <div>
                            <button type="submit" class="w-100 btn btn-lg btn-primary">Submit</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </Authorized>
    </AuthorizeView>
}
else
{
    <div class="row justify-content-center">
        <div class="col-md-4">
            <EditForm Model="ToDoInput" method="post" OnValidSubmit="HandleToDoSubmit" FormName="todo">
                <DataAnnotationsValidator />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="ToDoInput.ToDoItem" class="form-control" aria-required="true" placeholder="Enter your to-do item" />
                    <label for="todo" class="form-label">To-Do Item</label>
                    <ValidationMessage For="() => ToDoInput.ToDoItem" class="text-danger" />
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Add To-Do</button>
                </div>
            </EditForm>
            <ul class="list-group mt-3">
                @foreach (var item in toDoItems)
                {
                    <li class="list-group-item">@item.Item</li>
                }
            </ul>
        </div>
    </div>
}

@code {
    private string? errorMessage;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromForm]
    private ToDoInputModel ToDoInput { get; set; } = new();

    private bool isCPRValid = false;
    public CPR? userWithCPR;
    private List<ToDoList> toDoItems { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
    }

    private async Task HandleCPRSubmit()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var authUser = authState.User;

        userWithCPR = await ToDoDbContext.CPR.FirstOrDefaultAsync(c => c.User == authUser.Identity.Name);

        if (userWithCPR == null)
        {
            var hashedCPR = HashingHandler.BCryptHashing(Input.CPRNumber);

            await ToDoDbContext.AddAsync(new CPR { User = authUser.Identity.Name, CprNr = hashedCPR });
            await ToDoDbContext.SaveChangesAsync();
            userWithCPR = await ToDoDbContext.CPR.FirstOrDefaultAsync(c => c.User == authUser.Identity.Name);
            isCPRValid = true;
        }
        else if (!HashingHandler.BCryptVerify(Input.CPRNumber, userWithCPR.CprNr))
        {
            errorMessage = "Incorrect CPR";
        }
        else
        {
            errorMessage = null;
            isCPRValid = true;
        }

        var encryptedToDoItems = await ToDoDbContext.ToDoList.Where(t => t.UserId == userWithCPR.Id).ToListAsync();

        foreach (var item in encryptedToDoItems)
        {
            var decryptedItem = await AsymmetricEncryptionHandler.Decrypt(item.Item);
            toDoItems.Add(new ToDoList { Id = item.Id, UserId = item.UserId, Item = decryptedItem });
        }
        StateHasChanged();
    }

    private async Task HandleToDoSubmit()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var newToDo = new ToDoList { UserId = userWithCPR.Id, Item = ToDoInput.ToDoItem };

        try
        {
            var encryptedToDo = await AsymmetricEncryptionHandler.Encrypt(newToDo.Item);
            newToDo.Item = encryptedToDo;

            await ToDoDbContext.ToDoList.AddAsync(newToDo);
            await ToDoDbContext.SaveChangesAsync();

            var decryptedItem = await AsymmetricEncryptionHandler.Decrypt(newToDo.Item);
            newToDo.Item = decryptedItem;

            toDoItems.Add(newToDo);
        }
        catch (Exception e)
        {
            errorMessage = $"Operation failed: {e.Message}";
            return;
        }

        ToDoInput.ToDoItem = string.Empty;
        StateHasChanged();
    }

    private sealed class InputModel
    {
        [Required]
        [RegularExpression(@"^\d{10}$", ErrorMessage = "CPR must be exactly 10 digits.")]
        public string CPRNumber { get; set; }
    }

    private sealed class ToDoInputModel
    {
        [Required]
        public string ToDoItem { get; set; }
    }
}
